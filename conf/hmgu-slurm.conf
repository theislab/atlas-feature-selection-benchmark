/*
 * -------------------------------------------------
 * Nextflow config file
 * -------------------------------------------------
 * Slurm configuration for the HMGU cluster
 * -------------------------------------------------
 */
// Extended set of fields, e.g. native_id, cpu and memory:
trace.fields = 'process,task_id,hash,name,native_id,attempt,status,exit,realtime,cpus,memory,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'

env.TMPDIR = '/localscratch/$USER/nextflow-tmp/$SLURM_JOB_ID'
conda.cacheDir = "$HOME/nf-conda-envs/atlas-feature-selection"

process {
    executor       = 'slurm'
    queue          = 'cpu_p'
    clusterOptions = '--nice=10000 --constraint=Lustre_File_System'
    cpus           = 1
    memory         = { check_max( 12.GB * task.attempt, 'memory' ) }
    time           = { check_max( 2.h  * task.attempt,  'time'   ) }
    scratch        = true

    errorStrategy = { task.exitStatus in [143,137,104,134,139,140] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    //
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_tiny {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 1.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 4     * task.attempt, 'cpus'    ) }
        memory = { check_max( 24.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 2.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 8     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 48.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 10.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = { task.exitStatus in [143,137,104,134,139,140] ? 'ignore' : 'finish' }
        maxRetries    = 0
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 3
    }
}

params {
    // Max resource options
    max_memory = '192.GB'
    max_cpus   = 48
    max_time   = '48.h'
}
