/*
========================================================================================
    Nextflow config file

    Based on the nf-core template
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Experiment name
    experiment                 = "default"

    // Directories
    outdir                     = "./output/${params.experiment}"
    reportsdir                 = './reports'
    bindir                     = './bin'
    tracedir                   = './_nf-trace'

    // Input datasets
    datasets                   = [
        [
            name : "tinySim",
            batch_col : "Batch",
            label_col : "Group",
            query_batches : "Batch4"
        ],
        [
            name : "tinySim2",
            batch_col : "Batch",
            label_col : "Group",
            query_batches : "Batch4"
        ]
    ]

    // Features selection methods
    methods                    = [
        [
            name : "all"
        ],
        [
            name : "random",
            settings : [
                [
                    n_features : 500,
                    seed : 1
                ],
                [
                    n_features : 1000,
                    seed : 1
                ],
                [
                    n_features : 2000,
                    seed : 1
                ]
            ]
        ]
    ]

    // Evaluation metrics
    metrics                    = [
        [
            name : "batchPurity",
            type : "Integration"
        ],
        [
            name : "mixing",
            type : "Integration"
        ],
        [
            name : "accuracy",
            type : "Classification"
        ],
        [
            name : "rareAccuracy",
            type : "Classification"
        ]
    ]

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '16.GB'
    max_cpus                   = 4
    max_time                   = '8.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.conf'

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    hmgu_slurm {
        includeConfig 'conf/hmgu-slurm.conf'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those containers

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/${trace_timestamp}/execution_timeline.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/${trace_timestamp}/execution_report.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/${trace_timestamp}/execution_trace.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/${trace_timestamp}/pipeline_dag.svg"
}

manifest {
    name            = 'atlas-feature-selection'
    author          = 'Theis lab'
    homePage        = 'https://github.com/theislab/atlas-feature-selection-benchmark'
    description     = 'Atlas feature selection benchmarking'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
